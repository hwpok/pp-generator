<#-- 生成package信息 -->
<#if daoModel.daoClassPackageName??>package ${daoModel.daoClassPackageName};</#if>

import java.util.List;
import java.util.HashMap;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.springframework.stereotype.Component;
import com.ibatis.sqlmap.client.SqlMapClient;

<#-- 生成import信息 -->
<#list daoModel.importClassSet as clazz>
import ${clazz};
</#list>

/**
 * ${daoModel.tableName}<#if daoModel.tableComment??>[${daoModel.tableComment}]</#if> DOS
 * Generate by Xbatis Generator 
 * Create time ${daoModel.createTime?string("yyyy/MM/dd HH:mm:ss")} 
 */
 @Component("${daoModel.daoClassShort}")
 public class ${daoModel.daoClassShort} extends SqlMapClientDaoSupport{
     
     @Resource(name="sqlMapClient")
     private SqlMapClient  sqlMapClient;
     
     @PostConstruct
     public void initSqlMapClient(){
         super.setSqlMapClient(sqlMapClient);
     }
    
    /** 
     * 得到命名空间 
     * @param sqlId
     */
    private static String getOprSql(String sqlId){
       return "${daoModel.daoClassPackageName}.${daoModel.daoClassShort}." + sqlId;
    }
    
    /**
     * 新增记录
     * @param ${daoModel.poClassShort?uncap_first}
     */
    public SysUserPO insert(${daoModel.poClassShort} ${daoModel.poClassShort?uncap_first}){
        return (SysUserPO)getSqlMapClientTemplate().insert(getOprSql("insert"), sysUserPO);
    }
    
    /**
     * 根据主键修改记录
     * @param ${daoModel.poClassShort?uncap_first}
     */
    public int updateByPk(<#list daoModel.daoPkModelLst as daoPkModel>${daoPkModel.javaTypeShort} ${daoPkModel.property}, </#list>${daoModel.poClassShort} ${daoModel.poClassShort?uncap_first}){
        <#list daoModel.daoPkModelLst as daoPkModel>
        ${daoModel.poClassShort?uncap_first}.set${daoPkModel.property?cap_first}(${daoPkModel.property});  <#if daoPkModel.columnComment??>// 设置${daoPkModel.columnComment}</#if>
        </#list>
        return getSqlMapClientTemplate().update(getOprSql("updateByPk"), ${daoModel.poClassShort?uncap_first});
    }
    
    /**
     * 根据HashMap修改记录
     * @param hashMap
     */
    public int updateByHashMap(HashMap<String, Object> hashMap){
        return getSqlMapClientTemplate().update(getOprSql("updateByHashMap"), hashMap);
    }
    
    /**
     * 根据主键删除的记录
     <#list daoModel.daoPkModelLst as daoPkModel>
     * @param ${daoPkModel.property}
     </#list>
     */
    public int deleteByPk(<#list daoModel.daoPkModelLst as daoPkModel>${daoPkModel.javaTypeShort} ${daoPkModel.property}<#if daoPkModel_has_next>, </#if></#list>){
        ${daoModel.poClassShort} ${daoModel.poClassShort?uncap_first} = new ${daoModel.poClassShort}();
        <#list daoModel.daoPkModelLst as daoPkModel>
        ${daoModel.poClassShort?uncap_first}.set${daoPkModel.property?cap_first}(${daoPkModel.property});  <#if daoPkModel.columnComment??>// 设置${daoPkModel.columnComment}</#if>
        </#list>
        return getSqlMapClientTemplate().delete(getOprSql("deleteByPk"), ${daoModel.poClassShort?uncap_first});
    }
    
    /**
     * 根据对象删除记录
     * @param ${daoModel.poClassShort?uncap_first}
     */
    public int deleteByObj(${daoModel.poClassShort} ${daoModel.poClassShort?uncap_first}){
        return getSqlMapClientTemplate().delete(getOprSql("deleteByObj"), ${daoModel.poClassShort?uncap_first});
    }
    
    /**
     * 根据主键查询的记录
     <#list daoModel.daoPkModelLst as daoPkModel>
     * @param ${daoPkModel.property}
     </#list>
     */
    public ${daoModel.poClassShort} findObjByPk(<#list daoModel.daoPkModelLst as daoPkModel>${daoPkModel.javaTypeShort} ${daoPkModel.property}<#if daoPkModel_has_next>, </#if></#list>){
        ${daoModel.poClassShort} ${daoModel.poClassShort?uncap_first} = new ${daoModel.poClassShort}();
        <#list daoModel.daoPkModelLst as daoPkModel>
        ${daoModel.poClassShort?uncap_first}.set${daoPkModel.property?cap_first}(${daoPkModel.property});  <#if daoPkModel.columnComment??>// 设置${daoPkModel.columnComment}</#if>
        </#list>
        return (${daoModel.poClassShort})getSqlMapClientTemplate().queryForObject(getOprSql("findObjByPk"), ${daoModel.poClassShort?uncap_first});
    }
    
    /**
     * 根据对象查询, 查询结果为集合
     * @param ${daoModel.poClassShort?uncap_first}
     */
     @SuppressWarnings("unchecked")
    public List<${daoModel.poClassShort}> queryLstByObj(${daoModel.poClassShort} ${daoModel.poClassShort?uncap_first}){
        return (List<${daoModel.poClassShort}>)getSqlMapClientTemplate().queryForList(getOprSql("queryLstByObj"), ${daoModel.poClassShort?uncap_first});
    }
    
    /**
     * 根据HashMap分页面查询, 查询结果为集合
     * @param hashMap
     * @param offsetIndex
     * @param pageSize
     */
    public List<${daoModel.poClassShort}> queryPageByMap(HashMap<String, Object> hashMap, int offsetIndex, int pageSize){
        if(offsetIndex > -1 && pageSize>0){
            hashMap.put("offsetIndex", offsetIndex);
            hashMap.put("pageSize", pageSize);
        }
        return (List<${daoModel.poClassShort}>)getSqlMapClientTemplate().queryForList(getOprSql("queryPageByMap"), hashMap);
    }
    
    /**
     * 查询记录条数
     * @param hashMap
     */
    public int queryCountByMap(HashMap<String, Object> hashMap){
        return (int)getSqlMapClientTemplate().queryForObject(getOprSql("queryCountByMap"), hashMap);
    }
 }
 